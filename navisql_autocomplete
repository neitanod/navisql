#!/bin/bash

_navi_is_sourced() {
    # Comprueba si el script está siendo ejecutado en el contexto de la shell actual
    # o si está siendo ejecutado en una subshell (indirectamente a través de un source)
    [[ "${BASH_SOURCE[0]}" != "${0}" ]]
}

if ! _navi_is_sourced; then
    cd "$(dirname "$0")"
    source ./lib/colors.sh
    cat <<EOF
${RED}Must be sourced, not just run.${NORMAL}

    ./navisql_autocomplete          ${RED}Wrong!${NORMAL}

    source ./navisql_autocomplete   ${GREEN}Correct${NORMAL}

    . ./navisql_autocomplete        ${GREEN}Correct${NORMAL}
EOF
    exit 1
fi


# Check if the required folder and files exist, create if not
_navi_initialize_files() {
  local navi_folder="$HOME/.navisql"
  [ ! -d "$navi_folder" ] && mkdir "$navi_folder"

  local config_file="$HOME/.navisql/navisql.json"
  [ ! -f "$config_file" ] && echo '{ "connection": {} }' > "$config_file"

  local cache_file="$HOME/.navisql/navisql_cache.json"
  [ ! -f "$cache_file" ] && echo '{}' > "$cache_file"
}

# Get connections from the config file
_navi_get_connections() {
  jq -r '.connection | keys | .[]' ~/.navisql/navisql.json
}

# Get databases from the cache file
_navi_get_databases() {
  local conn="$1"
  jq -r --arg conn "$conn" '.[$conn] | keys | .[]' ~/.navisql/navisql_cache.json
}

# Get tables from the cache file for a specific database
_navi_get_tables() {
  local conn="$1"
  local db="$2"
  jq -r --arg conn "$conn" --arg db "$db" '.[$conn][$db] | .[]' ~/.navisql/navisql_cache.json
}


# Get fields from a live MySQL query
_navi_get_fields() {
  local connection="$1"
  local db="$2"
  local table="$3"

  local MYSQL_USER=$(jq -r ".connection.$connection.user // empty" ~/.navisql/navisql.json)
  local MYSQL_PASSWORD=$(jq -r ".connection.$connection.pass // empty" ~/.navisql/navisql.json)
  local MYSQL_HOST=$(jq -r ".connection.$connection.host // empty" ~/.navisql/navisql.json)
  local MYSQL_PORT=$(jq -r ".connection.$connection.port // empty" ~/.navisql/navisql.json)

  mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -D "$db" -e "SHOW COLUMNS FROM $table" -s --skip-column-names | awk '{print $1}'
}

# Autocomplete function for navisql commands
_navisql_autocomplete() {

  # Configuration arrays
  declare -A _navi_cmd_config

  _navi_cmd_config[show,2]="_navi_get_connections"
  _navi_cmd_config[show,3]="_navi_get_databases \$2"
  _navi_cmd_config[show,4]="_navi_get_tables \$2 \$3"

  _navi_cmd_config[fk-add,2]="_navi_get_connections"
  _navi_cmd_config[fk-add,3]="_navi_get_databases \$2"
  _navi_cmd_config[fk-add,4]="_navi_get_tables \$2 \$3"
  _navi_cmd_config[fk-add,5]="_navi_get_fields \$2 \$3 \$4"
  _navi_cmd_config[fk-add,6]="_navi_get_databases \$2"
  _navi_cmd_config[fk-add,7]="_navi_get_tables \$2 \$6"
  _navi_cmd_config[fk-add,8]="_navi_get_fields \$2 \$6 \$7"

  _navi_cmd_config[cache-build,2]="_navi_get_connections"

  _navi_cmd_config[connection-remove,2]="_navi_get_connections"

  _navi_cmd_config[ls,2]="_navi_get_connections"
  _navi_cmd_config[ls,3]="_navi_get_databases \$2"
  _navi_cmd_config[ls,4]="_navi_get_tables \$2 \$3"

  _navi_cmd_config[query,2]="_navi_get_connections"
  _navi_cmd_config[query,3]="_navi_get_databases \$2"

  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  opts="ls show config connection-add connection-remove connection-list cache-build fk-add fk-export history query"

  _navi_initialize_files

  if [[ ${COMP_CWORD} -eq 1 ]]; then
    # First argument: complete with command options
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
  fi

  local cmd="${COMP_WORDS[1]}"
  local position="${COMP_CWORD}"
  local func_def="${_navi_cmd_config[$cmd,$position]}"

  if [[ -n "$func_def" ]]; then
    # Replace placeholders with actual arguments
    for ((i=1; i<COMP_CWORD; i++)); do
      func_def=$(echo "$func_def" | sed "s/\\\$$i/${COMP_WORDS[i]}/g")
    done

    # Execute the function and get the completion options
    local completion_options=$(eval "$func_def")
    COMPREPLY=( $(compgen -W "${completion_options}" -- ${cur}) )
    return 0
  fi
}

# Register the autocomplete function for navisql commands
complete -F _navisql_autocomplete navisql

# if [ -n "$ZSH_VERSION" ]; then
#   autoload -Uz compinit
#   compinit
#   compdef _navisql_autocomplete navisql
#   echo "navisql autocomplete loaded"
# fi
