#!/bin/bash

# Must be sourced, not just ran.

# Wrong:
#    ./navisql_autocomplete

# Correct:
#    . ./navisql_autocomplete

# Autocomplete function for navisql commands
_navisql_autocomplete() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  opts="ls show configure add-connection remove-connection list-connections cache-build add-fk"

  # Check if the required folder and files exists, create if not
  local navi_folder="$HOME/.navisql"
  if [ ! -d "$navi_folder" ]; then
  mkdir "$navi_folder"
  fi
  local config_file="$HOME/.navisql/navisql.json"
  if [ ! -f "$config_file" ]; then
  echo "{ \"connection\": {} }" > "$config_file"
  fi
  local cache_file="$HOME/.navisql/navisql_cache.json"
  if [ ! -f "$cache_file" ]; then
  echo "{}" > "$cache_file"
  fi

  if [[ ${COMP_CWORD} -eq 1 ]]; then
    # First argument: complete with command options
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
  fi

  case "${COMP_WORDS[1]}" in
    ls|show|add_connection|remove-connection|cache-build|list-connections|add-fk)
      if [[ ${COMP_CWORD} -eq 2 ]]; then
        # Complete with connection names
        local connections=$(jq -r '.connection | keys | .[]' ~/.navisql/navisql.json)
        COMPREPLY=( $(compgen -W "${connections}" -- ${cur}) )
        return 0
      fi

      if [[ "${COMP_WORDS[1]}" == "add-fk" ]]; then
        if [[ ${COMP_CWORD} -eq 3 ]]; then
          # Complete with database names
          local dbs=$(jq -r 'keys | .[]' ~/.navisql/navisql_cache.json)
          COMPREPLY=( $(compgen -W "${dbs}" -- ${cur}) )
          return 0
        fi

        if [[ ${COMP_CWORD} -eq 4 ]]; then
          # Complete with table names
          local db="${COMP_WORDS[3]}"
          local tables=$(jq -r --arg db "$db" '.[$db] | .[]' ~/.navisql/navisql_cache.json)
          COMPREPLY=( $(compgen -W "${tables}" -- ${cur}) )
          return 0
        fi

        if [[ ${COMP_CWORD} -eq 5 ]]; then
          # Complete with field names
          local db="${COMP_WORDS[3]}"
          local table="${COMP_WORDS[4]}"
          # Get connection info from config file
          local connection="${COMP_WORDS[2]}"
          local MYSQL_USER=$(jq -r ".connection.$connection.user // empty" ~/.navisql/navisql.json)
          local MYSQL_PASSWORD=$(jq -r ".connection.$connection.pass // empty" ~/.navisql/navisql.json)
          local MYSQL_HOST=$(jq -r ".connection.$connection.host // empty" ~/.navisql/navisql.json)
          local MYSQL_PORT=$(jq -r ".connection.$connection.port // empty" ~/.navisql/navisql.json)
          # Get fields from a live mysql query
          local fields=$(mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -D "$db" -e "SHOW COLUMNS FROM $table" -s --skip-column-names | awk '{print $1}')
          COMPREPLY=( $(compgen -W "${fields}" -- ${cur}) )
          return 0
        fi

        if [[ ${COMP_CWORD} -eq 6 ]]; then
          # Complete with referenced table names
          local db="${COMP_WORDS[3]}"
          local tables=$(jq -r --arg db "$db" '.[$db] | .[]' ~/.navisql/navisql_cache.json)
          COMPREPLY=( $(compgen -W "${tables}" -- ${cur}) )
          return 0
        fi
      fi

      if [[ "${COMP_WORDS[1]}" == "show" || "${COMP_WORDS[1]}" == "ls" ]]; then
        if [[ ${COMP_CWORD} -eq 2 ]]; then
          # Complete with connection names
          local connections=$(jq -r '.connection | keys | .[]' ~/.navisql/navisql.json)
          COMPREPLY=( $(compgen -W "${connections}" -- ${cur}) )
          return 0
        fi

        if [[ ${COMP_CWORD} -eq 3 ]]; then
          # Complete with database names
          local dbs=$(jq -r 'keys | .[]' ~/.navisql/navisql_cache.json)
          COMPREPLY=( $(compgen -W "${dbs}" -- ${cur}) )
          return 0
        fi

        if [[ ${COMP_CWORD} -eq 4 ]]; then
          # Complete with table names
          local db="${COMP_WORDS[3]}"
          local tables=$(jq -r --arg db "$db" '.[$db] | .[]' ~/.navisql/navisql_cache.json)
          COMPREPLY=( $(compgen -W "${tables}" -- ${cur}) )
          return 0
        fi
      fi
    ;;
    configure)
        if [[ ${COMP_CWORD} -eq 2 ]]; then
          COMPREPLY=( $(compgen -W "add remove" -- ${cur}) )
          return 0
        fi
    ;;
  esac
}

# Register the autocomplete function for navisql commands
complete -F _navisql_autocomplete navisql

# Ensure the autocomplete function is loaded for zsh
if [ -n "$ZSH_VERSION" ]; then
  autoload -Uz compinit && compinit
  autoload -U bashcompinit && bashcompinit
  complete -F _navisql_autocomplete navisql
fi
