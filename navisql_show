#!/bin/bash

# Function to read configuration values
get_config_value() {
  local key=$1
  local config_file=$2
  echo $(jq -r ".$key" "$config_file")
}

# Function to perform MySQL select and format the output
navisql() {
  local connection=$1
  local db=$2
  local table=$3
  local id=${4:-id} # ID to search for, default to id to show the first record
  local id_field=${5:-id}  # Default to 'id' if no id_field is provided

  # Load connection details from configuration file
  local config_file="$HOME/.navisql/navisql.json"
  MYSQL_USER=$(get_config_value "connection.${connection}.user // empty" "$config_file")
  MYSQL_USER=${MYSQL_USER:-root}
  MYSQL_PASSWORD=$(get_config_value "connection.${connection}.pass // empty" "$config_file")
  MYSQL_HOST=$(get_config_value "connection.${connection}.host // empty" "$config_file")
  MYSQL_HOST=${MYSQL_HOST:-localhost}
  MYSQL_PORT=$(get_config_value "connection.${connection}.port // empty" "$config_file")
  MYSQL_PORT=${MYSQL_PORT:-3306}
  WEB_EDIT=$(get_config_value "web_edit // empty" "$config_file")

  # Perform the MySQL query
  result=$(mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -D "$db" -se "SELECT * FROM $table WHERE $id_field = $id;")

  # Check if the result is empty
  if [ -z "$result" ]; then
    if [[ "$id" == "id" ]]; then
      echo "No records found"
    else
      echo "No records found for $table where $id_field = $id"
    fi
    return
  fi

  # Parse the result
  IFS=$'\t' read -r -a columns <<< "$result"

  # Get column names
  column_names=$(mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -D "$db" -se "SHOW COLUMNS FROM $table;")
  IFS=$'\n' read -d '' -r -a names <<< "$column_names"

  RETURNED_ID=$i
  # Display the result with potential foreign key references
  for i in "${!columns[@]}"; do
    column_name=$(echo "${names[i]}" | awk '{print $1}')
    # if column name is "id", store in returned_id, but trim whitespaces first
    column_name=$(echo "$column_name" | xargs)
    if [[ "${column_name}" == "id" ]]; then
      RETURNED_ID="${columns[i]}"
    fi
    echo "- $column_name: ${columns[i]}"
    foreign_key_config="connection.$connection.foreign_keys.$table.$column_name"
    foreign_table=$(get_config_value "$foreign_key_config.table // empty" "$config_file")
    if [[ "$foreign_table" ]]; then
      foreign_db=$(get_config_value "$foreign_key_config.database // empty" "$config_file")
      foreign_db=${foreign_db:-$db}
      foreign_id_field=$(get_config_value "$foreign_key_config.id_field // empty" "$config_file")
      foreign_id_field=${foreign_id_field:-id}
      foreign_id_field_to_print=""
      if [[ "$foreign_id_field" != "id" ]]; then
        foreign_id_field_to_print=" ($foreign_id_field)"
      fi
      echo "navisql show $connection $foreign_db $foreign_table ${columns[i]} $foreign_id_field_to_print"
    fi
  done

  # "web_edit":"http://www.local.ip1.cc/adminer/?server={{SERVER}}&username={{USER}}&db={{DB}}&edit={{TABLE}}&where%5Bid%5D={{ID}}",
  if [[ "$WEB_EDIT" ]]; then
    WEB_EDIT=$(echo "$WEB_EDIT" | sed "s/{{SERVER}}/$MYSQL_HOST/g" | sed "s/{{USER}}/$MYSQL_USER/g" | sed "s/{{DB}}/$db/g" | sed "s/{{TABLE}}/$table/g" | sed "s/{{ID}}/${RETURNED_ID}/g")
    echo "[ Web edit: $WEB_EDIT ]"
  fi
}

# Check if the correct number of arguments are provided
if [ "$#" -lt 3 ]; then
  echo "Usage: navisql show <connection> <db> <table> <id> [<id_field>]"
  exit 1
fi

# Call the function with the provided arguments
navisql "$1" "$2" "$3" "$4" "$5"
